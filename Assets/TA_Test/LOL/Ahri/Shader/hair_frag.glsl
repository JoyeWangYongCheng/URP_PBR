#version 330
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform vec4 _LightColor0;
uniform float _OcclusionStrength;
uniform float _BrightnessInOcclusion;
uniform vec4 u_LightShadowData;
uniform vec2 u_UniqueShadowFilterWidth;
uniform vec3 u_ShadowFadeCenter;
uniform float _ShadowStrength;
uniform vec3 _RakingLightColor;
uniform vec4 _AmbientCol;
uniform vec4 _ReflectionColor;
uniform float _BrightnessInShadow;
uniform float _RakingLightSoftness;
uniform vec3 _DirLight;
uniform float _MGSyncMotion;
uniform float _BumpScale;
uniform vec4 _MainTex_ST;
uniform vec4 _Color;
uniform float _GlossMapScale;
uniform vec4 _SecondarySpecularColor;
uniform vec4 _PrimarySpecularColor;
uniform float _PrimarySpecularExponent;
uniform float _PrimarySpecularShift;
uniform float _SecondarySpecularExponent;
uniform float _SecondarySpecularShift;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _MetallicGlossMap;
uniform sampler2D _OcclusionMap;
uniform sampler2D _TangentMap;
uniform sampler2D _HairDataMap;
uniform sampler2D _ReflectionMatCap;
uniform sampler2DShadow hlslcc_zcmpu_UniqueShadowTexture;
uniform sampler2D u_UniqueShadowTexture;
in vec4 vs_TEXCOORD0; // uv
in vec3 vs_TEXCOORD1; // WorldSpaceViewDir
in vec4 vs_TEXCOORD2; // tSpace0  worldTngent.x worldBinormal.x worldNormal.x worldPos.x
in vec4 vs_TEXCOORD3; // tSpace1
in vec4 vs_TEXCOORD4; // tSpace2
in vec4 vs_TEXCOORD5; // 
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat16_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat16_1;
bvec3 u_xlatb1;
vec3 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat16_5;
vec3 u_xlat16_6;
vec4 u_xlat16_7;
vec4 u_xlat16_8;
vec3 u_xlat16_9;
vec2 u_xlat16_10;
vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat16_13;
vec3 u_xlat16_14;
float u_xlat15;
float u_xlat16_19;
float u_xlat16_20;
vec2 u_xlat25;
float u_xlat16_26;
float u_xlat16_30;
float u_xlat16_31;
float u_xlat37;
float u_xlat16_37;
float u_xlat16_38;
float u_xlat16_42;
float u_xlat16_43;
void main(){
    //阴影
    (u_xlatb0.xyz = greaterThanEqual(vs_TEXCOORD5.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz);
    (u_xlat0.xyz = mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0), vec3(u_xlatb0.xyz)));
    (u_xlatb1.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), vs_TEXCOORD5.xyzx).xyz);
    (u_xlat1.xyz = mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0), vec3(u_xlatb1.xyz)));
    (u_xlat0.xyz = (u_xlat0.xyz * u_xlat1.xyz));
    (u_xlat16_2.x = (u_xlat0.y * u_xlat0.x));
    (u_xlat16_2.x = (u_xlat0.z * u_xlat16_2.x));
    (u_xlat16_2.x = (u_xlat16_2.x * _ShadowStrength));
    vec3 txVec0 = vec3(vs_TEXCOORD5.xy, vs_TEXCOORD5.z);
    (u_xlat16_14.x = textureLod(hlslcc_zcmpu_UniqueShadowTexture, txVec0, 0.0));
    (u_xlat16_0 = ((u_UniqueShadowFilterWidth.xyxy * vec4(0.5, 0.0, 0.5, 0.5)) + vs_TEXCOORD5.xyxy));
    vec3 txVec1 = vec3(u_xlat16_0.xy, vs_TEXCOORD5.z);
    (u_xlat16_26 = textureLod(hlslcc_zcmpu_UniqueShadowTexture, txVec1, 0.0));
    vec3 txVec2 = vec3(u_xlat16_0.zw, vs_TEXCOORD5.z);
    (u_xlat16_38 = textureLod(hlslcc_zcmpu_UniqueShadowTexture, txVec2, 0.0));
    (u_xlat16_1.x = (u_xlat16_26 + u_xlat16_14.x));
    (u_xlat16_1.x = (u_xlat16_38 + u_xlat16_1.x));
    (u_xlat16_14.xy = ((u_UniqueShadowFilterWidth.xy * vec2(0.0, 0.5)) + vs_TEXCOORD5.xy));
    vec3 txVec3 = vec3(u_xlat16_14.xy, vs_TEXCOORD5.z);
    (u_xlat16_14.x = textureLod(hlslcc_zcmpu_UniqueShadowTexture, txVec3, 0.0));
    (u_xlat16_1.x = (u_xlat16_1.x + u_xlat16_14.x));
    (u_xlat1.x = ((u_xlat16_1.x * 0.25) + (-u_LightShadowData.z)));
    (u_xlat13 = ((-u_LightShadowData.z) + 1.0));
    (u_xlat13 = (1.0 / u_xlat13));
    (u_xlat1.x = (u_xlat13 * u_xlat1.x));
    (u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
    (u_xlat13 = ((u_xlat1.x * -2.0) + 3.0));
    (u_xlat1.x = (u_xlat1.x * u_xlat1.x));
    (u_xlat1.x = (u_xlat1.x * u_xlat13));
    (u_xlat16_13.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz));
    (u_xlat16_13.x = max(u_xlat16_13.x, 0.001));
    (u_xlat16_13.x = inversesqrt(u_xlat16_13.x));
    (u_xlat16_3.xyz = (u_xlat16_13.xxx * _WorldSpaceLightPos0.xyz));
    //法线图
    //(u_xlat16_4.xyz = texture(_BumpMap, vs_TEXCOORD0.xy).xyz);
    (u_xlat16_4.xyz = texture(_BumpMap, uv).xyz);
    (u_xlat16_14.xyz = ((u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0)) + vec3(-1.0, -1.0, -1.0)));
    (u_xlat16_14.xy = (u_xlat16_14.xy * vec2(vec2(_BumpScale, _BumpScale))));
    (u_xlat4.xyz = (u_xlat16_14.yyy * vs_TEXCOORD3.xyz));
    (u_xlat4.xyz = ((vs_TEXCOORD2.xyz * u_xlat16_14.xxx) + u_xlat4.xyz));
    (u_xlat4.xyz = ((vs_TEXCOORD4.xyz * u_xlat16_14.zzz) + u_xlat4.xyz));
    (u_xlat25.x = dot(u_xlat4.xyz, u_xlat4.xyz));
    (u_xlat25.x = inversesqrt(u_xlat25.x));
    (u_xlat4.xyz = (u_xlat25.xxx * u_xlat4.xyz));
    
    (u_xlat25.x = dot(u_xlat4.xyz, u_xlat16_3.xyz));
    (u_xlat16_14.x = (u_xlat25.x + 0.2));
    (u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0));
    (u_xlat16_26 = u_xlat25.x);
    (u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0));
    (u_xlat25.xy = (vec2(1.0, 1.0) / u_LightShadowData.wy));
    (u_xlat25.x = (u_xlat25.x * u_xlat16_14.x));
    (u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0));
    (u_xlat3.x = ((u_xlat25.x * -2.0) + 3.0));
    (u_xlat25.x = (u_xlat25.x * u_xlat25.x));
    (u_xlat25.x = (u_xlat25.x * u_xlat3.x));
    (u_xlat16_14.x = ((u_xlat1.x * u_xlat25.x) + -1.0));
    (u_xlat16_2.x = (u_xlat16_14.x * u_xlat16_2.x));
    (u_xlat3.x = vs_TEXCOORD2.w);
    (u_xlat3.y = vs_TEXCOORD3.w);
    (u_xlat3.z = vs_TEXCOORD4.w);
    //(u_xlat5.xyz = ((-u_xlat3.xyz) + _WorldSpaceCameraPos.xyz));
    float3 halfDir = L+V;
    (u_xlat3.xyz = (u_xlat3.xyz + (-u_ShadowFadeCenter.xyz)));
    (u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz));
    (u_xlat1.x = sqrt(u_xlat1.x));
    (u_xlat1.x = (u_xlat1.x * u_LightShadowData.x));
    (u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z);
    (u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z);
    (u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z);
    (u_xlat25.x = dot(u_xlat5.xyz, u_xlat3.xyz));
    (u_xlat16_6.z = dot(u_xlat3.xyz, u_xlat4.xyz));
    (u_xlat25.x = (u_xlat25.y * u_xlat25.x));
    (u_xlat25.x = clamp(u_xlat25.x, 0.0, 1.0));
    (u_xlat1.w = ((u_xlat25.x * -2.0) + 3.0));
    (u_xlat1.z = (u_xlat25.x * u_xlat25.x));
    (u_xlat1.xz = (u_xlat1.xz * u_xlat1.xw));
    (u_xlat25.x = ((u_xlat1.z * u_xlat16_2.x) + 1.0));
    (u_xlat16_2.x = ((-u_xlat25.x) + 1.0));
    (u_xlat37 = (u_xlat1.x * u_xlat1.x));
    (u_xlat1.x = (u_xlat37 * u_xlat1.x));
    (u_xlat1.x = min(u_xlat1.x, 1.0));
    (u_xlat16_2.x = ((u_xlat1.x * u_xlat16_2.x) + u_xlat25.x));
    (u_xlat16_7.xyz = (u_xlat16_2.xxx * _LightColor0.xyz));
    (u_xlat16_2.x = (u_xlat16_2.x + -1.0));
    (u_xlat16_2.x = ((_BrightnessInShadow * u_xlat16_2.x) + 1.0));
    (u_xlat16_14.xyz = (vec3(u_xlat16_26) * u_xlat16_7.xyz));
    (u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz));
    (u_xlat1.x = max(u_xlat1.x, 0.001));
    (u_xlat1.x = inversesqrt(u_xlat1.x));
    (u_xlat1.xzw = (u_xlat1.xxx * vs_TEXCOORD1.xyz));
    (u_xlat3.xyz = ((_WorldSpaceLightPos0.xyz * u_xlat16_13.xxx) + u_xlat1.xzw));
    (u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xzw));
    (u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0));
    (u_xlat16_42 = ((-u_xlat1.x) + 1.0));
    (u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz));
    (u_xlat1.x = max(u_xlat1.x, 0.001));
    (u_xlat1.x = inversesqrt(u_xlat1.x));
    (u_xlat1.xyz = (u_xlat1.xxx * u_xlat3.xyz));
    //头发切线图  切线空间中的法线转向世界空间法线
    //(u_xlat16_3.xyz = texture(_TangentMap, vs_TEXCOORD0.xy).xyz);
    flot3 tangentMap = texture(_TangentMap, uv).xyz;
    //(u_xlat16_3.xyz = ((u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0)) + vec3(-1.0, -1.0, -1.0)));
    tangentMap = tangentMap*2-1;
    //(u_xlat5.xyz = (u_xlat16_3.yyy * vs_TEXCOORD3.xyz));
    //float3 worldBinormal = tangentMap.y * worldBinormal;
    //(u_xlat3.xyw = ((vs_TEXCOORD2.xyz * u_xlat16_3.xxx) + u_xlat5.xyz));
    //float3 TB = worldTngent * tangentMap.x + worldBinormal;
    //(u_xlat3.xyz = ((vs_TEXCOORD4.xyz * u_xlat16_3.zzz) + u_xlat3.xyw));
    //float3 TBN = worldNormal * tangentMap.z + tangentAndBinormal;
    half3 worldNormal = half3(dot(tSpace0,tangentMap),dot(tSpace1,tangentMap),dot(tSpace2,tangentMap));   
    //(u_xlat37 = dot(u_xlat3.xyz, u_xlat3.xyz));
    //(u_xlat37 = inversesqrt(u_xlat37));
    //(u_xlat3.xyz = (vec3(u_xlat37) * u_xlat3.xyz));
    worldNormal = normalize(worldNormal);
    
    //头发数据图
    //(u_xlat16_5.xy = texture(_HairDataMap, vs_TEXCOORD0.xy).xy);
    float2 hairDataMap = texture(_HairDataMap, uv).xy;
    //(u_xlat16_7.xy = (u_xlat16_5.xx + vec2(_PrimarySpecularShift, _SecondarySpecularShift)));
    float2 hairOffset = hairDataMap + float2(_PrimarySpecularShift, _SecondarySpecularShift);
    //(u_xlat16_7.xzw = ((u_xlat16_7.xxx * u_xlat4.xyz) + u_xlat3.xyz));
    
    float3 hairTangentOffset01 = hairOffset.x * worldNormal + worldTangent;
    
    //(u_xlat16_8.xyz = ((u_xlat16_7.yyy * u_xlat4.xyz) + u_xlat3.xyz));
    float3 hairTangentOffset02 = hairOffset.y * worldNormal + worldTangent;
    
    (u_xlat16_19 = dot(u_xlat16_7.xzw, u_xlat16_7.xzw));
    (u_xlat16_19 = inversesqrt(u_xlat16_19));
    (u_xlat16_7.xyz = (vec3(u_xlat16_19) * u_xlat16_7.xzw));
    (u_xlat16_7.x = dot(u_xlat16_7.xyz, u_xlat1.xyz));
    (u_xlat16_19 = (((-u_xlat16_7.x) * u_xlat16_7.x) + 1.0));
    (u_xlat16_7.x = (u_xlat16_7.x + 1.0));
    (u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0));
    (u_xlat16_19 = sqrt(u_xlat16_19));
    (u_xlat16_19 = log2(u_xlat16_19));
    (u_xlat16_19 = (u_xlat16_19 * _PrimarySpecularExponent));
    (u_xlat16_19 = exp2(u_xlat16_19));
    (u_xlat16_31 = ((u_xlat16_7.x * -2.0) + 3.0));
    (u_xlat16_7.x = (u_xlat16_7.x * u_xlat16_7.x));
    (u_xlat16_7.x = (u_xlat16_7.x * u_xlat16_31));
    (u_xlat16_7.x = (u_xlat16_19 * u_xlat16_7.x));
    (u_xlat16_7.xyz = (u_xlat16_7.xxx * _PrimarySpecularColor.xyz));
    (u_xlat16_43 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz));
    (u_xlat16_43 = inversesqrt(u_xlat16_43));
    (u_xlat16_8.xyz = (vec3(u_xlat16_43) * u_xlat16_8.xyz));
    (u_xlat16_43 = dot(u_xlat16_8.xyz, u_xlat1.xyz));
    (u_xlat16_8.x = (((-u_xlat16_43) * u_xlat16_43) + 1.0));
    (u_xlat16_43 = (u_xlat16_43 + 1.0));
    (u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0));
    (u_xlat16_8.x = sqrt(u_xlat16_8.x));
    (u_xlat16_8.x = log2(u_xlat16_8.x));
    (u_xlat16_8.x = (u_xlat16_8.x * _SecondarySpecularExponent));
    (u_xlat16_8.x = exp2(u_xlat16_8.x));
    (u_xlat16_20 = ((u_xlat16_43 * -2.0) + 3.0));
    (u_xlat16_43 = (u_xlat16_43 * u_xlat16_43));
    (u_xlat16_43 = (u_xlat16_43 * u_xlat16_20));
    (u_xlat16_43 = (u_xlat16_8.x * u_xlat16_43));
    (u_xlat16_7.xyz = ((vec3(u_xlat16_43) * _SecondarySpecularColor.xyz) + u_xlat16_7.xyz));
    (u_xlat16_1.xyz = ((u_xlat16_7.xyz * u_xlat16_5.yyy) + vec3(-9.9999997e-05, -9.9999997e-05, -9.9999997e-05)));
    (u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0)));
    (u_xlat16_1.xyz = min(u_xlat16_1.xyz, vec3(100.0, 100.0, 100.0)));
    
    (u_xlat16_7.xy = ((vs_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw));
    //主贴图
    (u_xlat16_0 = texture(_MainTex, u_xlat16_7.xy));
    (u_xlat16_3.xy = (u_xlat16_7.xy + (-vs_TEXCOORD0.xy)));
    (u_xlat3.xy = ((vec2(_MGSyncMotion) * u_xlat16_3.xy) + vs_TEXCOORD0.xy));
    (u_xlat16_3.xy = texture(_MetallicGlossMap, u_xlat3.xy).xy);
    (u_xlat16_0 = (u_xlat16_0 * _Color));
    (u_xlat16_5.xyz = ((u_xlat16_0.xyz * vec3(0.30530602, 0.30530602, 0.30530602)) + vec3(0.68217111, 0.68217111, 0.68217111)));
    (u_xlat16_5.xyz = ((u_xlat16_0.xyz * u_xlat16_5.xyz) + vec3(0.012522878, 0.012522878, 0.012522878)));
    (u_xlat16_9.xyz = (u_xlat16_0.xyz * u_xlat16_5.xyz));
    (u_xlat16_5.xyz = ((u_xlat16_0.xyz * u_xlat16_5.xyz) + vec3(-0.039999999, -0.039999999, -0.039999999)));
    (SV_Target0.w = u_xlat16_0.w);
    (u_xlat16_5.xyz = ((u_xlat16_3.xxx * u_xlat16_5.xyz) + vec3(0.039999999, 0.039999999, 0.039999999)));
    (u_xlat16_37 = ((-u_xlat16_3.x) + 1.0));
    (u_xlat16_3.x = (u_xlat16_37 * 0.95999998));
    (u_xlat16_7.x = (((-u_xlat16_37) * 0.95999998) + 1.0));
    (u_xlat37 = ((u_xlat16_3.y * _GlossMapScale) + u_xlat16_7.x));
    (u_xlat37 = clamp(u_xlat37, 0.0, 1.0));
    (u_xlat15 = (((-u_xlat16_3.y) * _GlossMapScale) + 1.0));
    (u_xlat16_7.xyz = ((-u_xlat16_5.xyz) + vec3(u_xlat37)));
    (u_xlat16_1.xyz = ((u_xlat16_9.xyz * u_xlat16_3.xxx) + u_xlat16_1.xyz));
    (u_xlat16_8.xyz = (u_xlat16_3.xxx * u_xlat16_9.xyz));
    (u_xlat16_3.xz = texture(_OcclusionMap, vs_TEXCOORD0.xy).xy);
    (u_xlat16_10.xy = ((-vec2(_OcclusionStrength, _BrightnessInOcclusion)) + vec2(1.0, 1.0)));
    (u_xlat16_10.xy = ((u_xlat16_3.xz * vec2(_OcclusionStrength, _BrightnessInOcclusion)) + u_xlat16_10.xy));
    (u_xlat16_11.xyz = (u_xlat16_10.xxx * _AmbientCol.xyz));
    (u_xlat16_8.xyz = (u_xlat16_8.xyz * u_xlat16_11.xyz));
    (u_xlat16_14.xyz = ((u_xlat16_1.xyz * u_xlat16_14.xyz) + u_xlat16_8.xyz));
    (u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].x);
    (u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].x);
    (u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].x);
    (u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat4.xyz));
    (u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].y);
    (u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].y);
    (u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].y);
    (u_xlat16_6.y = dot(u_xlat1.xyz, u_xlat4.xyz));
    (u_xlat1.xyz = (vs_TEXCOORD3.www * hlslcc_mtx4x4unity_MatrixV[1].xyz));
    (u_xlat1.xyz = ((hlslcc_mtx4x4unity_MatrixV[0].xyz * vs_TEXCOORD2.www) + u_xlat1.xyz));
    (u_xlat1.xyz = ((hlslcc_mtx4x4unity_MatrixV[2].xyz * vs_TEXCOORD4.www) + u_xlat1.xyz));
    (u_xlat1.xyz = (u_xlat1.xyz + hlslcc_mtx4x4unity_MatrixV[3].xyz));
    (u_xlat16_43 = dot(u_xlat1.xyz, u_xlat16_6.xyz));
    (u_xlat16_43 = (u_xlat16_43 + u_xlat16_43));
    (u_xlat16_6.xyz = ((u_xlat16_6.xyz * (-vec3(u_xlat16_43))) + u_xlat1.xyz));
    (u_xlat16_43 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz));
    (u_xlat16_43 = inversesqrt(u_xlat16_43));
    (u_xlat16_8.w = ((u_xlat16_6.z * u_xlat16_43) + 1.0));
    (u_xlat16_8.xy = (u_xlat16_6.xy * vec2(u_xlat16_43)));
    (u_xlat16_6.x = dot(u_xlat16_8.xyw, u_xlat16_8.xyw));
    (u_xlat16_6.x = sqrt(u_xlat16_6.x));
    (u_xlat16_6.x = (u_xlat16_6.x + u_xlat16_6.x));
    (u_xlat16_6.xy = (u_xlat16_8.xy / u_xlat16_6.xx));
    (u_xlat16_6.xy = (u_xlat16_6.xy + vec2(0.5, 0.5)));
    (u_xlat16_30 = (((-u_xlat15) * 4.1999998) + 10.2));
    (u_xlat16_30 = (u_xlat15 * u_xlat16_30));
    (u_xlat16_1.xyz = textureLod(_ReflectionMatCap, u_xlat16_6.xy, u_xlat16_30).xyz);
    (u_xlat16_1.xyz = (u_xlat16_1.xyz * _ReflectionColor.xyz));
    (u_xlat16_3.xzw = ((u_xlat16_1.xyz * vec3(0.30530602, 0.30530602, 0.30530602)) + vec3(0.68217111, 0.68217111, 0.68217111)));
    (u_xlat16_3.xzw = ((u_xlat16_1.xyz * u_xlat16_3.xzw) + vec3(0.012522878, 0.012522878, 0.012522878)));
    (u_xlat16_1.xyz = (u_xlat16_1.xyz * u_xlat16_3.xzw));
    (u_xlat16_6.xyz = (u_xlat16_10.xxx * u_xlat16_1.xyz));
    (u_xlat16_2.x = (u_xlat16_2.x * u_xlat16_10.y));
    (u_xlat1.x = (u_xlat15 * u_xlat15));
    (u_xlat1.x = max(u_xlat1.x, 0.001));
    (u_xlat1.x = (u_xlat15 * u_xlat1.x));
    (u_xlat13 = (((-u_xlat15) * 0.079999998) + 0.60000002));
    (u_xlat1.x = (((-u_xlat1.x) * u_xlat13) + 1.0));
    (u_xlat16_6.xyz = (u_xlat16_6.xyz * u_xlat1.xxx));
    (u_xlat16_43 = (u_xlat16_42 * u_xlat16_42));
    (u_xlat16_1.x = log2(u_xlat16_42));
    (u_xlat16_42 = (u_xlat16_43 * u_xlat16_43));
    (u_xlat16_7.xyz = ((vec3(u_xlat16_42) * u_xlat16_7.xyz) + u_xlat16_5.xyz));
    (u_xlat16_14.xyz = ((u_xlat16_6.xyz * u_xlat16_7.xyz) + u_xlat16_14.xyz));
    (u_xlat16_14.xyz = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0)));
    (u_xlat16_13.xyz = log2(u_xlat16_14.xyz));
    (u_xlat16_13.xyz = (u_xlat16_13.xyz * vec3(0.41666666, 0.41666666, 0.41666666)));
    (u_xlat16_13.xyz = exp2(u_xlat16_13.xyz));
    (u_xlat16_13.xyz = ((u_xlat16_13.xyz * vec3(1.0549999, 1.0549999, 1.0549999)) + vec3(-0.055, -0.055, -0.055)));
    (u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0)));
    (u_xlat16_3.x = max(_RakingLightSoftness, 1.0));
    (u_xlat16_1.x = (u_xlat16_1.x * u_xlat16_3.x));
    (u_xlat16_1.x = exp2(u_xlat16_1.x));
    (u_xlat16_14.xyz = (u_xlat16_1.xxx * _RakingLightColor.xyz));
    (u_xlat16_2.xyz = (u_xlat16_2.xxx * u_xlat16_14.xyz));
    (u_xlat16_38 = dot(_DirLight.xyz, _DirLight.xyz));
    (u_xlat16_38 = inversesqrt(u_xlat16_38));
    (u_xlat16_6.xyz = (vec3(u_xlat16_38) * _DirLight.xyz));
    (u_xlat16_38 = dot(u_xlat4.xyz, u_xlat16_6.xyz));
    (u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0));
    (SV_Target0.xyz = ((u_xlat16_2.xyz * vec3(u_xlat16_38)) + u_xlat16_13.xyz));
    return ;
}
